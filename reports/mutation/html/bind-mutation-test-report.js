document.querySelector('mutation-test-report-app').report = {"files":{"/home/antoine/Bureau/MyGitHub/tp-jest/src/interval.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":6,"line":5},"start":{"column":29,"line":2}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"1","location":{"end":{"column":6,"line":11},"start":{"column":16,"line":9}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"6","location":{"end":{"column":19,"line":10},"start":{"column":16,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":38,"line":10},"start":{"column":35,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2","location":{"end":{"column":55,"line":10},"start":{"column":16,"line":10}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start + \",\" + this.end - \"]\"","status":"Survived"},{"id":"3","location":{"end":{"column":49,"line":10},"start":{"column":16,"line":10}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start + \",\" - this.end","status":"Survived"},{"id":"8","location":{"end":{"column":55,"line":10},"start":{"column":52,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":6,"line":29},"start":{"column":24,"line":27}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"12","location":{"end":{"column":70,"line":28},"start":{"column":16,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"13","location":{"end":{"column":41,"line":28},"start":{"column":16,"line":28}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Survived"},{"id":"14","location":{"end":{"column":41,"line":28},"start":{"column":16,"line":28}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Survived"},{"id":"15","location":{"end":{"column":41,"line":28},"start":{"column":16,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"4","location":{"end":{"column":38,"line":10},"start":{"column":16,"line":10}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start - \",\"","status":"Survived"},{"id":"5","location":{"end":{"column":32,"line":10},"start":{"column":16,"line":10}},"mutatorName":"BinaryExpression","replacement":"\"[\" - this.start","status":"Survived"},{"id":"17","location":{"end":{"column":70,"line":28},"start":{"column":45,"line":28}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.end","status":"Survived"},{"id":"16","location":{"end":{"column":41,"line":28},"start":{"column":16,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"18","location":{"end":{"column":70,"line":28},"start":{"column":45,"line":28}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.end","status":"Survived"},{"id":"19","location":{"end":{"column":70,"line":28},"start":{"column":45,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"20","location":{"end":{"column":70,"line":28},"start":{"column":45,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"21","location":{"end":{"column":6,"line":49},"start":{"column":24,"line":47}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"22","location":{"end":{"column":70,"line":48},"start":{"column":16,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.end > interval.end || this.start < interval.start","status":"Survived"},{"id":"23","location":{"end":{"column":70,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"24","location":{"end":{"column":70,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"25","location":{"end":{"column":39,"line":48},"start":{"column":16,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.end","status":"Survived"},{"id":"10","location":{"end":{"column":70,"line":28},"start":{"column":16,"line":28}},"mutatorName":"BinaryExpression","replacement":"this.end > interval.start || this.start < interval.end","status":"Survived"},{"id":"11","location":{"end":{"column":70,"line":28},"start":{"column":16,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"26","location":{"end":{"column":39,"line":48},"start":{"column":16,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.end","status":"Survived"},{"id":"29","location":{"end":{"column":70,"line":48},"start":{"column":43,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.start","status":"Survived"},{"id":"28","location":{"end":{"column":39,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"31","location":{"end":{"column":70,"line":48},"start":{"column":43,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"30","location":{"end":{"column":70,"line":48},"start":{"column":43,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.start","status":"Survived"},{"id":"27","location":{"end":{"column":39,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"32","location":{"end":{"column":70,"line":48},"start":{"column":43,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"33","location":{"end":{"column":6,"line":86},"start":{"column":21,"line":67}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"34","location":{"end":{"column":66,"line":70},"start":{"column":12,"line":70}},"mutatorName":"IfStatement","replacement":"false","status":"Survived"},{"id":"36","location":{"end":{"column":66,"line":70},"start":{"column":12,"line":70}},"mutatorName":"BinaryExpression","replacement":"this.end < interval.start && this.start > interval.end","status":"Survived"},{"id":"35","location":{"end":{"column":66,"line":70},"start":{"column":12,"line":70}},"mutatorName":"IfStatement","replacement":"true","status":"Survived"},{"id":"38","location":{"end":{"column":37,"line":70},"start":{"column":12,"line":70}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Survived"},{"id":"37","location":{"end":{"column":37,"line":70},"start":{"column":12,"line":70}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Survived"},{"id":"39","location":{"end":{"column":37,"line":70},"start":{"column":12,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"42","location":{"end":{"column":66,"line":70},"start":{"column":41,"line":70}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.end","status":"Survived"},{"id":"40","location":{"end":{"column":37,"line":70},"start":{"column":12,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"41","location":{"end":{"column":66,"line":70},"start":{"column":41,"line":70}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.end","status":"Survived"},{"id":"43","location":{"end":{"column":66,"line":70},"start":{"column":41,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"44","location":{"end":{"column":66,"line":70},"start":{"column":41,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"45","location":{"end":{"column":10,"line":74},"start":{"column":68,"line":70}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"46","location":{"end":{"column":44,"line":74},"start":{"column":19,"line":74}},"mutatorName":"IfStatement","replacement":"false","status":"Survived"},{"id":"47","location":{"end":{"column":44,"line":74},"start":{"column":19,"line":74}},"mutatorName":"IfStatement","replacement":"true","status":"Survived"},{"id":"48","location":{"end":{"column":44,"line":74},"start":{"column":19,"line":74}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Survived"},{"id":"49","location":{"end":{"column":44,"line":74},"start":{"column":19,"line":74}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Survived"},{"id":"51","location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}},"mutatorName":"IfStatement","replacement":"false","status":"Survived"},{"id":"50","location":{"end":{"column":10,"line":79},"start":{"column":46,"line":74}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"52","location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}},"mutatorName":"IfStatement","replacement":"true","status":"Survived"},{"id":"55","location":{"end":{"column":10,"line":84},"start":{"column":46,"line":79}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"53","location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.end","status":"Survived"},{"id":"56","location":{"end":{"column":6,"line":107},"start":{"column":28,"line":104}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"54","location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.end","status":"Survived"}],"source":"class Interval {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end\n    }\n\n    // COMMAND CONSOLE FOR CODE COVERAGE \"node_modules/.bin/jest --coverage\"\n\n    toString() {\n        return \"[\" + this.start + \",\" + this.end + \"]\";\n    }\n\n    /**\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.overlaps(interval2) => true\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                       ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.overlaps(interval2) => false\n     *\n     * @param {Interval} interval\n     * @returns {boolean}\n     */\n    overlaps(interval) {\n        return this.end > interval.start && this.start < interval.end;\n    }\n\n    /**\n     * Retourne true si cet interval contient le paramètre interval\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.includes(interval2) => true\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                              ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.includes(interval2) => false\n     *\n     * @param {Interval} interval\n     * @returns {boolean}\n     */\n    includes(interval) {\n        return this.end > interval.end && this.start < interval.start;\n    };\n\n    /**\n     * Retourne l'union de deux intervals\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n     *\n     * @param {Interval} interval\n     * @returns {Interval[]}\n     */\n    union(interval) {\n        let tab_interval = [];\n        // 2 intervals sont dissociés => \n        if(this.end < interval.start || this.start > interval.end) {\n            tab_interval.push(this);\n            tab_interval.push(interval);\n        // Exemple 1 (dans les 2 sens)\n        } else if(this.end > interval.start) {\n            let interFusion = new Interval();\n            interFusion.start = this.start;\n            interFusion.end = interval.end;\n            tab_interval.push(interFusion);\n        } else if(this.start > interval.end) {\n            let interFusion = new Interval();\n            interFusion.start = interval.start;\n            interFusion.end = this.end;\n            tab_interval.push(interFusion);\n        }\n        return tab_interval;\n    };\n\n    /**\n     * Retourne l'intersection de deux intervals\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.intersection(interval2) =>                     ▒▒▒▒▒\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.intersection(interval2) => <tableau vide>\n     *\n     * @param {Interval} interval\n     * @returns {Interval|null}\n     */\n    intersection(interval) {\n        let tab_intersec = [];\n        \n    };\n\n    /**\n     * Retourne l'exclusion de deux intervals\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒     ▒▒▒▒▒▒▒▒\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n     *\n     * @param {Interval} interval\n     * @returns {Interval[]}\n     */\n    exclusion(interval) {\n\n    };\n}\n\nmodule.exports = Interval;\n"},"/home/antoine/Bureau/MyGitHub/tp-jest/src/math.js":{"language":"javascript","mutants":[{"id":"57","location":{"end":{"column":2,"line":16},"start":{"column":25,"line":2}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"58","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"60","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"BinaryExpression","replacement":"n !== 0","status":"Killed"},{"id":"59","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"61","location":{"end":{"column":6,"line":5},"start":{"column":18,"line":3}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"64","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"BinaryExpression","replacement":"n > 3000","status":"Killed"},{"id":"63","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"62","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"65","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"BinaryExpression","replacement":"n < 3000","status":"Killed"},{"id":"68","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"67","location":{"end":{"column":28,"line":8},"start":{"column":15,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"66","location":{"end":{"column":6,"line":9},"start":{"column":20,"line":7}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"69","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"70","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"72","location":{"end":{"column":6,"line":13},"start":{"column":16,"line":11}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"73","location":{"end":{"column":30,"line":12},"start":{"column":15,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"71","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"74","location":{"end":{"column":37,"line":15},"start":{"column":12,"line":15}},"mutatorName":"BinaryExpression","replacement":"n / Util.factorial(n - 1)","status":"Killed"},{"id":"75","location":{"end":{"column":36,"line":15},"start":{"column":31,"line":15}},"mutatorName":"BinaryExpression","replacement":"n + 1","status":"Killed"},{"id":"76","location":{"end":{"column":2,"line":37},"start":{"column":29,"line":26}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"78","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"79","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BinaryExpression","replacement":"n === 1 && n === 0","status":"Killed"},{"id":"77","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"80","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BinaryExpression","replacement":"n !== 1","status":"Killed"},{"id":"81","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"82","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"83","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"BinaryExpression","replacement":"n !== 0","status":"Killed"},{"id":"84","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"85","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"86","location":{"end":{"column":6,"line":29},"start":{"column":29,"line":27}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"87","location":{"end":{"column":21,"line":28},"start":{"column":16,"line":28}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"89","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"88","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"91","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"90","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"92","location":{"end":{"column":6,"line":32},"start":{"column":16,"line":30}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"93","location":{"end":{"column":50,"line":31},"start":{"column":15,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"94","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"95","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"BinaryExpression","replacement":"i <= n","status":"Killed"},{"id":"96","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"BinaryExpression","replacement":"i >= n","status":"Killed"},{"id":"97","location":{"end":{"column":31,"line":33},"start":{"column":28,"line":33}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Killed"},{"id":"98","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"99","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"100","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"BinaryExpression","replacement":"n % i !== 0","status":"Killed"},{"id":"101","location":{"end":{"column":18,"line":34},"start":{"column":13,"line":34}},"mutatorName":"BinaryExpression","replacement":"n * i","status":"Killed"},{"id":"103","location":{"end":{"column":16,"line":35},"start":{"column":12,"line":35}},"mutatorName":"BooleanSubstitution","replacement":"false","status":"Killed"},{"id":"102","location":{"end":{"column":38,"line":34},"start":{"column":33,"line":34}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"104","location":{"end":{"column":2,"line":57},"start":{"column":29,"line":49}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"105","location":{"end":{"column":26,"line":51},"start":{"column":20,"line":51}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"106","location":{"end":{"column":26,"line":51},"start":{"column":20,"line":51}},"mutatorName":"BinaryExpression","replacement":"i < n","status":"Survived"},{"id":"107","location":{"end":{"column":26,"line":51},"start":{"column":20,"line":51}},"mutatorName":"BinaryExpression","replacement":"i > n","status":"Killed"},{"id":"108","location":{"end":{"column":31,"line":51},"start":{"column":28,"line":51}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Killed"},{"id":"109","location":{"end":{"column":6,"line":55},"start":{"column":33,"line":51}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"110","location":{"end":{"column":27,"line":52},"start":{"column":12,"line":52}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"111","location":{"end":{"column":27,"line":52},"start":{"column":12,"line":52}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"112","location":{"end":{"column":10,"line":54},"start":{"column":29,"line":52}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"116","location":{"end":{"column":26,"line":73},"start":{"column":20,"line":73}},"mutatorName":"BinaryExpression","replacement":"j < n","status":"Killed"},{"id":"115","location":{"end":{"column":26,"line":73},"start":{"column":20,"line":73}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"117","location":{"end":{"column":26,"line":73},"start":{"column":20,"line":73}},"mutatorName":"BinaryExpression","replacement":"j > n","status":"Killed"},{"id":"113","location":{"end":{"column":26,"line":53},"start":{"column":19,"line":53}},"mutatorName":"BinaryExpression","replacement":"sum - i","status":"Killed"},{"id":"114","location":{"end":{"column":2,"line":88},"start":{"column":29,"line":71}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"119","location":{"end":{"column":6,"line":86},"start":{"column":32,"line":73}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"120","location":{"end":{"column":23,"line":74},"start":{"column":12,"line":74}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"123","location":{"end":{"column":18,"line":74},"start":{"column":12,"line":74}},"mutatorName":"BinaryExpression","replacement":"j * 15","status":"Killed"},{"id":"126","location":{"end":{"column":27,"line":77},"start":{"column":17,"line":77}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"124","location":{"end":{"column":10,"line":76},"start":{"column":25,"line":74}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"125","location":{"end":{"column":36,"line":75},"start":{"column":26,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"122","location":{"end":{"column":23,"line":74},"start":{"column":12,"line":74}},"mutatorName":"BinaryExpression","replacement":"j % 15 != 0","status":"Killed"},{"id":"121","location":{"end":{"column":23,"line":74},"start":{"column":12,"line":74}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"127","location":{"end":{"column":27,"line":77},"start":{"column":17,"line":77}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"128","location":{"end":{"column":27,"line":77},"start":{"column":17,"line":77}},"mutatorName":"BinaryExpression","replacement":"j % 5 != 0","status":"Killed"},{"id":"131","location":{"end":{"column":32,"line":78},"start":{"column":26,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"129","location":{"end":{"column":22,"line":77},"start":{"column":17,"line":77}},"mutatorName":"BinaryExpression","replacement":"j * 5","status":"Killed"},{"id":"130","location":{"end":{"column":10,"line":79},"start":{"column":29,"line":77}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"133","location":{"end":{"column":27,"line":80},"start":{"column":17,"line":80}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"132","location":{"end":{"column":27,"line":80},"start":{"column":17,"line":80}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"134","location":{"end":{"column":27,"line":80},"start":{"column":17,"line":80}},"mutatorName":"BinaryExpression","replacement":"j % 3 != 0","status":"Killed"},{"id":"135","location":{"end":{"column":22,"line":80},"start":{"column":17,"line":80}},"mutatorName":"BinaryExpression","replacement":"j * 3","status":"Killed"},{"id":"137","location":{"end":{"column":32,"line":81},"start":{"column":26,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"136","location":{"end":{"column":10,"line":82},"start":{"column":29,"line":80}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"138","location":{"end":{"column":10,"line":85},"start":{"column":14,"line":83}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"118","location":{"end":{"column":31,"line":73},"start":{"column":28,"line":73}},"mutatorName":"PostfixUnaryExpression","replacement":"j--","status":"Timeout"}],"source":"let Util = {};\nUtil.factorial = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n\n    if (n >= 3000) {\n        throw 'n too large'\n    }\n\n    if (n < 0) {\n        throw 'n is negative'\n    }\n\n    return n * Util.factorial(n - 1);\n};\n\n/**\n * Détermine si n est un nombre premier.\n * Util.isPrime(5) => false\n * Util.isPrime(6) => true\n *\n * @param {number} n\n * @returns {boolean}\n */\nUtil.isPrime = function (n) {\n    if (n === 1 || n === 0) {\n        return false;\n    }\n    if (n < 0) {\n        throw 'Unable to compute prime for n < 0'\n    }\n    for (var i = 2; i < n; i++)\n        if (n % i === 0) return false;\n    return true;\n\n};\n\n\n/**\n * Additionne l'ensemble des nombres premiers de 2 à n\n *\n * Util.sumPrime(6) = 2 + 3 + 5 = 10\n * Util.sumPrime(8) = 2 + 3 + 5 + 7 = 17\n *\n * @param {number} n\n * @returns {number}\n */\nUtil.sumPrime = function(n) {\n    let sum = 0;\n    for(let i = 2; i <= n; i++) {\n        if(Util.isPrime(i)) {\n            sum = sum + i;\n        }\n    }\n    return sum;\n};\n\n/**\n * Cette méthode doit retourner un tableau de 1 à n tel que:\n * - Pour les nombres multiples de 3, les remplacer par \"Fizz\"\n * - Pour les nombres multiples de 5, les remplacer par \"Buzz\"\n * - Pour les nombres multiples de 3 et 5, les remplacer par \"FizzBuzz\"\n *\n * Exp :\n * Util.fizzBuzz(15) => [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n *\n * @param {number} n\n * @returns {array}\n */\nUtil.fizzBuzz = function(n) {\n    let mon_tab = [];\n    for(let j = 1; j <= n; j++){\n        if(j % 15 == 0) {\n            mon_tab.push(\"FizzBuzz\");\n        }\n        else if(j % 5 == 0) {\n            mon_tab.push(\"Buzz\");\n        }\n        else if(j % 3 == 0) {\n            mon_tab.push(\"Fizz\");\n        }\n        else {\n            mon_tab.push(j);\n        }\n    } \nreturn mon_tab;\n};\n\n\n/**\n * Chiffre une phrase selon la règle suivante : Les A deviennent des B, les B des C, etc.\n *\n * Exp :\n * Util.cipher(\"Test Unitaire\") => \"Uftu Tojubjsf\"\n *\n * @param phrase\n * @returns {string}\n */\nUtil.cipher = function (phrase) {\n\n};\n\n\nmodule.exports = Util;\n\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};